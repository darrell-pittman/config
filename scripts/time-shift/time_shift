#! /usr/bin/env bash

set -euf -o pipefail

SCRIPT_DIR=$(cd -- $(dirname -- "${BASH_SOURCE[0]}")>/dev/null && pwd)

. ${SCRIPT_DIR}/consts

TODAY=$(date +%Y%m%d)

SOURCE_DEVICE=$(${SCRIPT_DIR}/device_name ${SOURCE_UUID})
printf "Source Device Name: %s\n" ${SOURCE_DEVICE}

BACKUP_DEVICE=$(${SCRIPT_DIR}/device_name ${BACKUP_UUID})
printf "Backup Device Name: %s\n" ${BACKUP_DEVICE}

UNMOUNT_SOURCE="$(${SCRIPT_DIR}/check_mount \
  ${SOURCE_DEVICE} ${SOURCE_TARGET} ${SOURCE_UUID})"

UNMOUNT_BACKUP="$(${SCRIPT_DIR}/check_mount \
  ${BACKUP_DEVICE} ${BACKUP_TARGET} ${BACKUP_UUID})"

trap_exit() {
  if [ "${UNMOUNT_SOURCE}" == "TRUE" ]
  then
    printf "Unmounting %s\n" "${SOURCE_TARGET}"
    umount ${SOURCE_TARGET}
  fi

  if [ "${UNMOUNT_BACKUP}" == "TRUE" ]
  then
    printf "Unmounting %s\n" "${BACKUP_TARGET}"
    umount ${BACKUP_TARGET}
  fi
}

trap trap_exit EXIT

run_timeshift() {
  local SUBVOL="${1:-ng_subvol}"
  local SUBVOL_OK=false

  for valid_subvol in "${VALID_SUBVOLS[@]}"
  do
    if [ "${SUBVOL}" == "${valid_subvol}" ]
    then
      SUBVOL_OK=true
      break
    fi
  done

  if ! ${SUBVOL_OK}
  then
    >&2 printf "Error: Invalid Subvol: %s\n" ${SUBVOL}
    return -1
  fi

  printf "Running timeshift for subvolume '%s'\n" ${SUBVOL}

  local CURRENT=${SUBVOL}_${TODAY}
  local CURRENT_PATH="${SOURCE_TARGET}/${CURRENT}"
  local BACKUP_CURRENT_PATH="${BACKUP_TARGET}/${CURRENT}" 

  local PARENTDATE_UNSAFE=$(\ls ${SOURCE_TARGET} \
    | sed -n -e "/^${CURRENT}$/d" \
    -e "s/^${SUBVOL}_\([[:digit:]]\{8\}\)$/\1/p" \
    | sort -r \
    | head -1)

  local PARENT_DATE=${PARENTDATE_UNSAFE:-0}
  local PARENT_OK=true
  if ((PARENT_DATE < SAFETY_DATE || PARENT_DATE >= TODAY))
  then
    PARENT_OK=false
  fi

  local PARENT="${SUBVOL}_${PARENT_DATE}"
  local PARENT_PATH="${SOURCE_TARGET}/${PARENT}"
  local BACKUP_PARENT_PATH="${BACKUP_TARGET}/${PARENT}"

  if [ ! -d "${CURRENT_PATH}" ]
  then
    if btrfs subvolume snapshot -r "${SOURCE_TARGET}/${SUBVOL}" "${CURRENT_PATH}"
    then
      printf "Readonly Snapshot '%s' created.\n" ${CURRENT_PATH}
    else
      >&2 printf "Error: Failed to create readonly snapshot '%s'.\n" ${CURRENT_PATH}
      exit -1
    fi
  else
    printf "Found Current Readonly Snapshot '%s'.\n" ${CURRENT_PATH}
  fi

  if [ ! -d "${BACKUP_CURRENT_PATH}" ]
  then
    if [[ PARENT_OK && -d "${BACKUP_PARENT_PATH}" ]]
    then
      printf "Deleting backup subvolume '%s' to make space.\n" ${BACKUP_PARENT_PATH}
      btrfs subvolume delete -c ${BACKUP_PARENT_PATH}
    fi
    printf "Sending '%s' to '%s'.\n" ${CURRENT_PATH} ${BACKUP_TARGET}
    if btrfs send ${CURRENT_PATH} | btrfs receive ${BACKUP_TARGET}
    then
      printf "'%s' successfully sent to '%s'.\n" ${CURRENT_PATH} ${BACKUP_TARGET}
    else
      >&2 printf "Error: Failed to send '%s' to '%s'.\n" ${CURRENT_PATH} ${BACKUP_TARGET}
      exit -1
    fi
  else
    printf "Found existing backup '%s'.\n" ${BACKUP_CURRENT_PATH}
  fi

  if [[ -d "${CURRENT_PATH}" && -d "${BACKUP_TARGET}/${CURRENT}" ]]
  then
    if [[ PARENT_OK && -d "${PARENT_PATH}" ]]
    then
      printf "Deleting snapshot '%s'.\n" ${PARENT_PATH}
      btrfs subvolume delete -c ${PARENT_PATH}
    fi
  fi
}

run_timeshift "@"
run_timeshift "@home"

printf "Syncing File Systems...\n"
btrfs filesystem sync ${SOURCE_TARGET}
btrfs filesystem sync ${BACKUP_TARGET}

